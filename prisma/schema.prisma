// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  email        String    @unique
  password     String
  role         Role      @default(user)
  refreshToken String?
  otp          String?
  otpExpires   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  createdServices      Service[]            @relation("ServiceCreator")
  createdCategories    Category[]
  createdSubcategories Subcategory[]
  createdNewsletters   NewsletterTemplate[]
  staffProfile         Staff?
  studentProfile       Student?
  Service              Service[]

  @@map("users")
}

model Staff {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Category {
  id           String   @id @default(cuid())
  categoryName String
  description  String?
  icon         String?
  tags         String[]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  creatorEmail  String
  services      Service[]
  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id              String   @id @default(cuid())
  subcategoryName String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  creatorEmail String
  services     Service[]

  @@map("subcategories")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  subcategory String?
  icon        String?
  price       Float?
  duration    String?
  tags        String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User         @relation("ServiceCreator", fields: [createdById], references: [id], onDelete: Cascade)
  creatorEmail   String
  categoryId     String?
  categoryRef    Category?    @relation(fields: [categoryId], references: [id])
  subcategoryId  String?
  subcategoryRef Subcategory? @relation(fields: [subcategoryId], references: [id])

  @@map("services")
}

model ContactUs {
  id              String                @id @default(cuid())
  fullName        String
  email           String
  companyName     String?
  phoneNumber     String
  subject         ContactSubject
  projectType     ContactUsProjectType?
  proposedBudget  ProposedBudget
  projectTimeline ProjectTimeline
  projectDetails  String
  status          ContactStatus         @default(initiated)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@map("contact_us")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter")
}

model NewsletterTemplate {
  id        String           @id @default(cuid())
  subject   String
  title     String
  subtitle  String?
  body      String
  images    Json? // Array of { publicId, secureUrl, alt, caption, order }
  status    NewsletterStatus @default(draft)
  sentAt    DateTime?
  sentCount Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("newsletter_templates")
}

enum Role {
  user
  admin
  staff
}

enum ContactStatus {
  initiated
  awaiting_payment
  awaiting_document_agreement
  mvp_in_progress
  mvp_completed
  project_in_progress
  project_completed
  on_hold
  cancelled
  rejected
}

enum ContactSubject {
  general_enquiry
  sales_and_partnership
  technical_support
  careers_and_hr
  media_and_press
  ai_ml_development
  web_development
  full_stack_marketing
  mobile_app_development
  it_solutions
  bootcamps_and_training
  desktop_app_development
  website_development
  e_commerce_development
  saas_development
  blockchain_development
  data_science_and_analytics
}

enum ContactUsProjectType {
  ai_ml_development
  web_development
  full_stack_marketing
  mobile_app_development
  it_solutions
  bootcamps_and_training
  desktop_app_development
  website_development
  e_commerce_development
  saas_development
  blockchain_development
  data_science_and_analytics
  general_enquiry
}

enum ProposedBudget {
  five_hundred_thousand
  one_million
  three_million
  five_million
  ten_million
  thwenty_five_million
  fifty_million
  hundred_million
}

enum ProjectTimeline {
  asap
  one_to_three_months
  three_to_six_months
  six_to_twelve_months
  flexible
}

enum NewsletterStatus {
  draft
  scheduled
  sent
  cancelled
}
